(A) Beautify the frontend further and make each relevant tagged a seperate statement in a list @core @basis
(A) Add a button on the sidebar that will rescrape the current viewer pane so that users don't need to constantly reopen the top extension bar to rescrape @core @basis
(A) Tweak the pastel colors being displayed for each tag @core @basis
(A) Add the google docs implementation of the google sheets extension @core @basis
(A) See if there are any other google editor applications that i can implement owl on @core @basis
(A) Clean up the README.md and INSTRUCTIONS.md to make it cleaner and easier to read @core @basis
(A) Ensure that the extension stays loaded on a given google editor even after that instance of the editor is closed for a day or more, that the user only has to give permissions to authorise once to decrease onboarding friction @core @basis
(A) See if there's any way to deploy the extension itself to the google marketplace extensions store @core @basis
(A) Allow the user to specify any prefix they want and assign any color they want, and save these configurations in a local config file so users don't have to keep respecifying the config @core @basis

(B) Could consider developing this as a specific offshoot off the general extension Owl, and call it something owl-related (similar to the name "legal eagle") @idea @future
(B) See if I can make owl more law-specific, for eg. adding more law-specific tags like CASE RULING etc. @idea @future
(B) See if I can somehow integrate a google call or LLM call so that those flagged cases are automatically googled based on specified sites like lawnet, lawteacher, or the ruling is googled and extracted @idea @future
(B) Basically if there's any area of automation that will make Owl more useful specifically for law students and lawyers @idea @future

(C) See if there's anyway to make Owl's source code editor agnostic, so it can automatically detect whether the current editor is Sheets or Docs or others and then specify the given source code for scraping that would be relevant for the given editor instance @idea @future
(C) Optimise Owl's scraping methods and see if any multithreading or more effecient chunking is possible instead of the extremly slow scraping present in each version of the extension presently @idea @future